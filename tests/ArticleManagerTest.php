<?php
require_once dirname(__FILE__) . '/../models/Article.inc.php';
require_once dirname(__FILE__) . '/../platforms/ArticleEngine.inc.php';
require_once dirname(__FILE__) . '/../managers/ArticleManager.inc.php';

/**
 * Test class for ArticleManager.
 * Generated by PHPUnit on 2010-09-30 at 13:06:17.
 */

class SimpleArticleEngineStub implements ArticleEngine
{
	/** @var Article **/
	private $article;

	public function __construct()
	{
		$this->article = new Article();
		$this->article->id = 1;
		$this->article->teaser = "This is a teaser";
		$this->article->body = "This is the main body";
		$this->article->creationDate = date('Y-m-d h:i:s');
		$this->article->lastModified = date('Y-m-d h:i:s');
		$this->article->format = 0;
	}

	public function fetchArticleByName($articleName)
	{
		if ($articleName == 'existing article')
		{
			return $this->article;
		}

		throw new ArticleManagerException("Article not found", ArticleManagerException::ARTICLE_NOT_FOUND);
	}
	
	public function fetchArticleByID($articleID)
	{
		if ($articleID == 1)
		{
			return $this->article;
		}

		throw new ArticleManagerException("Article not found", ArticleManagerException::ARTICLE_NOT_FOUND);
	}

	public function fetchArticleSummaries($articleLimit = 10000000, $offset = 0)
	{
		$articles = null;

		$articles = array();
		for ($a = $offset; $a < $offset + $articleLimit; ++$a)
		{
			$article = clone $this->article;
			$article->id = $a + 1;
			$article->body = '';
			$article->teaser .= ' for article #' . ($a + 1);
			$articles[] = $article;
		}

		return $articles;
	}
}


class ArticleManagerTest extends PHPUnit_Framework_TestCase
{
	/** @var ArticleManager */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$articleEngine = new SimpleArticleEngineStub();
		$this->object = new ArticleManager($articleEngine);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	public function testWillFetchAnExistingArticleByName()
	{
		try
		{
			$article = $this->object->fetchArticleByName('existing article');
			$this->assertInstanceOf('Article', $article, 'Did not return an article of type Article');
			$this->assertAttributeEquals(1, 'id', $article, 'Did not return the expected article');
		}
		catch(ArticleManagerException $e)
		{
			$this->fail('Did not return an article.');
		}
	}

	public function testWontFetchANonExistantArticleByName()
	{
		try
		{
			$article = $this->object->fetchArticleByName('non-existing article');
			$this->fail('did not return the appropriate ARTICLE_NOT_FOUND exception');
		}
		catch(ArticleManagerException $e)
		{
			$this->assertEquals(ArticleManagerException::ARTICLE_NOT_FOUND, $e->getCode(), 'returned the appropriate ARTICLE_NOT_FOUND exception');
		}
	}

	public function testWillFetchAnExistingArticleById()
	{
		try
		{
			$article = $this->object->fetchArticleByID(1);
			$this->assertInstanceOf('Article', $article, 'Did not return an article of type Article');
			$this->assertAttributeEquals(1, 'id', $article, 'Did not return the expected article');
		}
		catch(ArticleManagerException $e)
		{
			$this->fail('Did not return an article.');
		}
	}

	public function testWontFetchANonExistantArticleById()
	{
		try
		{
			$article = $this->object->fetchArticleByID(-1);
			$this->fail('did not return the appropriate ARTICLE_NOT_FOUND exception');
		}
		catch(ArticleManagerException $e)
		{
			$this->assertEquals(ArticleManagerException::ARTICLE_NOT_FOUND, $e->getCode(), 'returned the appropriate ARTICLE_NOT_FOUND exception');
		}
	}

	public function testWillFetchXArticleSummaries()
	{
		$summaries = $this->object->fetchArticleSummaries(5);
		$this->assertEquals(count($summaries), 5, 'Did not return 5 summaries');
		$this->assertEquals($summaries[0]->id, 1, 'Returned the wrong first summary');
		$this->assertEquals($summaries[4]->id, 5, 'Returned the wrong last summary');
	}

	public function testWillFetchSummariesOffsettedByXArticles()
	{
		$summaries = $this->object->fetchArticleSummaries(1, 5);
		$this->assertEquals($summaries[0]->teaser, 'This is a teaser for article #6', 'Returned the wrong teaser');
	}

	public function testWillFetchArticleTeasersForSummaries()
	{
		$summaries = $this->object->fetchArticleSummaries(1);
		$this->assertEquals($summaries[0]->teaser, 'This is a teaser for article #1', 'Returned the wrong teaser');
	}

	public function testWillFetchArticleTeasersForSummaries2()
	{
		$summaries = $this->object->fetchArticleSummaries(1);
		$this->assertEquals($summaries[0]->teaser, 'This is a teaser for article #1', 'Returned the wrong teaser');
	}

	public function testWontFetchArticleBodiesForSummaries()
	{
		$summaries = $this->object->fetchArticleSummaries(1);
		$this->assertEmpty($summaries[0]->body, 'Returned a non-empty body');
	}
}
